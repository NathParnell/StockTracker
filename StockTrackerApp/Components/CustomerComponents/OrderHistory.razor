@using StockTrackerCommon.Models;

<div class="orderHistoryContainer">
    <h1>Order History</h1>
    @if (_orders.Any(order => order.OrderStatus == OrderStatus.Accepted))
    {
        <div class="acceptedOrdersContainer">
            <h2>Accepted Orders</h2>
            @foreach (Order order in _orders.Where(order => order.OrderStatus == OrderStatus.Accepted))
            {
                <h3>Supplier: @_suppliers.FirstOrDefault(supp => supp.SupplierId == order.SupplierId).CompanyName</h3>
                @foreach (OrderItem orderItem in _orderItems.Where(oi => order.OrderItemIds.Contains(oi.OrderItemId)))
                {
                    <div class="orderItem">
                        <h4>Product: @_orderedProducts.FirstOrDefault(prod => prod.ProductId == orderItem.ProductId).ProductName</h4>
                        <p>Quantity: @orderItem.Quantity</p>
                        <p>Price: £@orderItem.OrderPrice</p>
                    </div>
                }
                <div class="orderInfo">
                    <h4>Date Placed: @order.OrderDate.ToShortDateString()</h4>
                    <h4>Total Price: £@order.TotalPrice</h4>
                </div>
            }
        </div>    
    }
    @if (_orders.Any(order => order.OrderStatus == OrderStatus.Pending))
    {
        <div class="pendingOrdersContainer">
            <h2>Pending Orders</h2>
            @foreach (Order order in _orders.Where(order => order.OrderStatus == OrderStatus.Pending))
            {
                <h3>Supplier: @_suppliers.FirstOrDefault(supp => supp.SupplierId == order.SupplierId).CompanyName</h3>
                @foreach (OrderItem orderItem in _orderItems.Where(oi => order.OrderItemIds.Contains(oi.OrderItemId)))
                {
                    <div class="orderItem">
                        <h4>Product: @_orderedProducts.FirstOrDefault(prod => prod.ProductId == orderItem.ProductId).ProductName</h4>
                        <p>Quantity: @orderItem.Quantity</p>
                        <p>Price: £@orderItem.OrderPrice</p>
                    </div>
                }
                <div class="orderInfo">
                    <h4>Date Placed: @order.OrderDate.ToShortDateString()</h4>
                    <h4>Total Price: £@order.TotalPrice</h4>
                </div>
            }
        </div>
    }
    @if (_orders.Any(order => order.OrderStatus == OrderStatus.Rejected))
    {
    <div class="rejectedOrdersContainer">
        <h2>Rejected Orders</h2>
        @foreach (Order order in _orders.Where(order => order.OrderStatus == OrderStatus.Rejected))
        {
            <h3>Supplier: @_suppliers.FirstOrDefault(supp => supp.SupplierId == order.SupplierId).CompanyName</h3>
            @foreach (OrderItem orderItem in _orderItems.Where(oi => order.OrderItemIds.Contains(oi.OrderItemId)))
            {
                <div class="orderItem">
                    <h4>Product: @_orderedProducts.FirstOrDefault(prod => prod.ProductId == orderItem.ProductId).ProductName</h4>
                    <p>Quantity: @orderItem.Quantity</p>
                    <p>Price: £@orderItem.OrderPrice</p>
                </div>
            }
            <div class="orderInfo">
                <h4>Date Placed: @order.OrderDate.ToShortDateString()</h4>
                <h4>Total Price: £@order.TotalPrice</h4>
            </div>
        }
    </div>
    }
</div>
